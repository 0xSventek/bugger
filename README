------------------------------------------------
BUGGER README

LAST MODIFIED:			4-15-2009

CREATED BY:					Eric Heidelmark
										hmark6@gmail.com

PLEASE DON'T:				Steal my stuff without letting me know. I have no recourse if you do, but I know you'll feel really really guilty about it and you don't want that, right?

ACKNOWLEDGEMENTS:		Blueprint CSS framework (http://www.blueprintcss.org/)
										Prototype JS framework (http://www.prototypejs.org/)
										script.aculo.us JS framework (http://script.aculo.us)
										Rails Recipes (http://www.pragprog.com/titles/fr_rr/)
										Stock Names (http://stocknames.info/) for the silly names!


------------------------------------------------
ABOUT BUGGER  
 
Bugger is a simple Bug Tracking Application written with Ruby on Rails on MySQL. See /doc for a long winded version of the documentation along with other goodies about this app. 

	WHAT YOU'LL NEED TO GET BUGGER RUNNING:
	
	* Ruby 1.8.6, Rails 1.2.6
	* MySQL 5
	* A web browser

  
------------------------------------------------
GETTING STARTED

'$' indicates a command that should be run from a command line shell.

In order to get the application up and running, you will need MySQL installed with the appropriate databases and permissions set up. I've written a rake task that should make this process painless:

  $ rake db:bootstrap
  
	* If rake fails it may be for one of the following reasons:
	
		- :bootstrap assumes it can log into mysql as root without a password. If your root account has a password, you may have to set up the databases manually. Take a look at /config/database.yml for the databases required.
		- If the mysql socket is anything other than /tmp/mysql.sock, this will have to be set in /config/database.yml. For example, the default Debian/Ubuntu socket has been commented out. Uncomment if you're using one of these systems.
		
Next, you need to run the migrations to arrange the tables in the database. rake will take care of this.

	$ rake db:migrate
	
Finally, there is a bit of data that needs to exist in the tables for the system to operate properly. I've written a rake task for this as well.

	$ rake db:seed
	
	Assuming no errors, you now have the proper database setup for Bugger. If you'd like to start with some sample data to get you going run the command:
	
		$ rake db:sampledata
		
		* * WARNING * * 
		This will erase all the data currently in the bugger table in MySQL and replace it with the sample data. This should only be run once before you begin to experiment with Bugger.

Once your fixtures have been loaded you can now start up a server by typing:

  $ ruby script/server
  
  and navigating to http://localhost:3000 to get started with Bugger.

If, at the conclusion of your experimenting with Bugger, you would like to remove all of the bugger database items, I've included a rake task for this.
	
	$ rake db:drop
	
	* * WARNING * *
	This will drop the entire database, so only do this when you're sure you're done.  
	
	
------------------------------------------------
NOTES

Clearly there are holes in the app that I'd like to take care of. Little ones like, Password Change; Big ones like, Ticket Resolution. It's a work in progress. 

Take a look at /doc/pdf. There I've included Bugger in its infancy. A good design starts with a pencil and paper. The documents are:
	
	- data.pdf	=> The first draft of the database that would drive bugger. You can see from the migrations in /db/migrations that this changed a bit during development.
	- flow.pdf	=> A sketch of the page flow that I envisioned for Bugger before writing a single line of code. It's surprisingly accurate for what was actually implemented. It also reveals features like a universal search which is yet to be implemented.
	- requirements_#.pdf	=> This is a list of functional requirements that I compiled for Bugger. Not complete, but certainly enough to get me going. 
	- features.pdf	=> This is list of features to add onto the basic requirements. If Bugger we released for sale to be purchased by Google and allow me to retire at 30, this is a list of things that would set Bugger apart from the crowded bug-tracking software packages. I can dream can't I?

The Interface is all line-and-text at this point. Once I have all of the desired functionality operating properly I intend to polish the chrome. I've laid the ground work for this already with a generic 24-column grid based style sheet. (Acknowledgement to BluePrint CSS!)


